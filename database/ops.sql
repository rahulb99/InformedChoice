create table products (
  fdc_id bigint not null,
  gtin_upc text null,
  description text null,
  brand_owner text null,
  brand_name text null,
  ingredients text null,
  branded_food_category text null,
  source character varying null,
  created_at timestamp with time zone null default now(),
  constraint products_pkey primary key (fdc_id),
  constraint products_fdc_id_key unique (fdc_id)
);

create table nutrients (
  id bigint generated by default as identity not null,
  nutrient_id integer null,
  fdc_id bigint null,
  name text null,
  amount real null,
  unit_name text null,
  created_at timestamp without time zone null default now(),
  constraint nutrients_pkey primary key (id),
  constraint nutrients_id_key unique (id),
  constraint nutrients_fdc_id_fkey foreign KEY (fdc_id) references products (fdc_id) on update RESTRICT on delete CASCADE
);

\copy products (fdc_id,gtin_upc,description,brand_owner,brand_name,ingredients,branded_food_category,source) from products.csv WITH DELIMITER ',' CSV HEADER
\COPY nutrients (fdc_id,nutrient_id,name,amount,unit_name) FROM nutrients.csv WITH DELIMITER ',' CSV HEADER

ALTER TABLE products
ADD COLUMN autocomplete tsvector
GENERATED ALWAYS AS (to_tsvector('english', description || ' ' || brand_name || ' ' || brand_owner)) STORED;

create or replace function search_products (input text) returns setof products as $$
begin
  return query
  select * from products where autocomplete @@ to_tsquery(input || ':*') or input % (description || ' ' || brand_name || ' ' || brand_owner) order by ts_rank(autocomplete, plainto_tsquery('english', input)) desc;
end;
$$ language plpgsql;

ALTER TABLE products
ADD COLUMN processed_score INTEGER CHECK (processed_score BETWEEN 1 AND 5),
ADD COLUMN processed_score_explanation TEXT,
ADD COLUMN nutrition_score INTEGER CHECK (nutrition_score BETWEEN 1 AND 5),
ADD COLUMN nutrition_score_explanation TEXT,
ADD COLUMN nutrition_info TEXT,
ADD COLUMN url TEXT UNIQUE;
ADD COLUMN health_issues JSON;

UPDATE products
SET nutrition_info = n.nutrition_info
FROM (
    SELECT 
        fdc_id, 
        STRING_AGG(Name || ' - ' || Amount || Unit_name, '; ') AS nutrition_info
    FROM nutrients
    GROUP BY fdc_id
) n
WHERE products.fdc_id = n.fdc_id;
